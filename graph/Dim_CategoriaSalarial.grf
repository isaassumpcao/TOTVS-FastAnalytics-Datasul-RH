<?xml version="1.0" encoding="UTF-8"?><Graph author="elisangela.madeira" created="Mon Apr 01 07:35:21 CST 2019" guiVersion="3.4.4.P" id="1554226728976" licenseType="Commercial" modified="Fri Jul 05 11:34:01 BRT 2019" modifiedBy="elisangela.madeira" name="DIMENSAO" revision="1.51" showComponentDetails="true">
<Global>
<Metadata id="Metadata20" previewAttachment="zip:(${DATA_SOURCE_DIR}/DataSulRH .zip)#func_categ_sal.csv" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," label="zip:(./data/source/DataSulRH .zip)#func_categ_sal.csv" name="func_categ_sal_input" previewAttachment="zip:(${DATA_SOURCE_DIR}/DataSulRH .zip)#func_categ_sal.csv" previewAttachmentCharset="ISO-8859-1" quoteChar="&quot;" quotedStrings="true" recordDelimiter="\n" skipSourceRows="1" type="delimited">
<Field name="INSTANCIA" type="string"/>
<Field name="PK_FUNC_CATEG_SAL" type="string"/>
<Field name="COD_CATEGSAL" type="string"/>
<Field name="DESC_CATEGORIA_SALARIAL" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="133" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="1. CARGA DO DATASET CATEGORIA SALARIAL (DIMENSÃO)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="556" x="18" y="19"/>
<Dictionary/>
</Global>
<Phase number="10">
<Node charset="ISO-8859-1" enabled="enabled" fileURL="zip:(${DATA_SOURCE_DIR}/${gdc_agent_zip})#func_categ_sal.csv" guiName="Categoria Salarial" guiX="37" guiY="53" id="CATEGORIA_SALARIAL" type="DATA_READER"/>
<Node dataset="dataset.categoriasalarial" datasetFieldMappings="{&quot;gd_dataset&quot;:{&quot;datasetId&quot;:&quot;dataset.categoriasalarial&quot;,&quot;datasetTitle&quot;:&quot;Categoria Salarial&quot;,&quot;attributes&quot;:[{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.categoriasalarial.codigocategoriasalarial&quot;,&quot;title&quot;:&quot;Código Categoria Salarial&quot;,&quot;prettyId&quot;:&quot;attr_categoriasalarial_codigocategoriasalarial&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.categoriasalarial.codigocategoriasalarial&quot;,&quot;title&quot;:&quot;Código Categoria Salarial&quot;,&quot;prettyId&quot;:&quot;codigocategoriasalarial&quot;,&quot;assignedMetadataField&quot;:&quot;COD_CATEGSAL&quot;,&quot;type&quot;:&quot;STRING&quot;,&quot;referenceKey&quot;:true}}],&quot;assignedMetadataField&quot;:null,&quot;selectedDisplayForm&quot;:null}},{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.categoriasalarial.descricaocategoriasalarial&quot;,&quot;title&quot;:&quot;Descrição Categoria Salarial&quot;,&quot;prettyId&quot;:&quot;attr_categoriasalarial_descricaocategoriasalarial&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.categoriasalarial.descricaocategoriasalarial&quot;,&quot;title&quot;:&quot;Descrição Categoria Salarial&quot;,&quot;prettyId&quot;:&quot;descricaocategoriasalarial&quot;,&quot;assignedMetadataField&quot;:&quot;DESC_CATEGORIA_SALARIAL&quot;,&quot;type&quot;:&quot;STRING&quot;,&quot;referenceKey&quot;:true}}],&quot;assignedMetadataField&quot;:null,&quot;selectedDisplayForm&quot;:null}},{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.categoriasalarial.pkcategoriasalarial&quot;,&quot;title&quot;:&quot;PK Categoria Salarial&quot;,&quot;prettyId&quot;:&quot;attr_categoriasalarial_pkcategoriasalarial&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.categoriasalarial.pkcategoriasalarial&quot;,&quot;title&quot;:&quot;PK Categoria Salarial&quot;,&quot;prettyId&quot;:&quot;pkcategoriasalarial&quot;,&quot;assignedMetadataField&quot;:&quot;PK_FUNC_CATEG_SAL&quot;,&quot;type&quot;:&quot;STRING&quot;,&quot;referenceKey&quot;:true}}],&quot;assignedMetadataField&quot;:null,&quot;selectedDisplayForm&quot;:null}}],&quot;referencedAttributes&quot;:[{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.instancia.instancia&quot;,&quot;title&quot;:&quot;Instância&quot;,&quot;prettyId&quot;:&quot;attr_instancia_instancia&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.instancia.instancia&quot;,&quot;title&quot;:&quot;Instância&quot;,&quot;prettyId&quot;:&quot;instancia__instancia&quot;,&quot;assignedMetadataField&quot;:null,&quot;type&quot;:&quot;STRING&quot;,&quot;referenceKey&quot;:false}}],&quot;assignedMetadataField&quot;:&quot;INSTANCIA&quot;,&quot;selectedDisplayForm&quot;:{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.instancia.instancia&quot;,&quot;title&quot;:&quot;Instância&quot;,&quot;prettyId&quot;:&quot;instancia__instancia&quot;,&quot;assignedMetadataField&quot;:null,&quot;type&quot;:&quot;STRING&quot;,&quot;referenceKey&quot;:false}}}}],&quot;dateAttributes&quot;:[],&quot;simpleFacts&quot;:[],&quot;dateFacts&quot;:[],&quot;datesWithFactConflict&quot;:[],&quot;entitiesWithoutValue&quot;:[],&quot;unassigneddateFacts&quot;:[],&quot;fieldsWithMetadataConflict&quot;:[],&quot;entitiesWithoutMetadata&quot;:[]}}" enabled="enabled" guiName="Categoria Salarial" guiX="408" guiY="53" id="CATEGORIA_SALARIAL1" mode="${LOAD_MODE_DIM}" retriesInterval="60" retriesNumber="5" type="GD_DATASET_WRITER"/>
<Node enabled="enabled" guiName="Tratament" guiX="230" guiY="53" id="TRATAMENT13" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
import "trans/lib.ctl";
// Transforms input record into output record.
function integer transform() {
	$out.0.INSTANCIA = formatString($in.0.INSTANCIA,null);
	$out.0.PK_FUNC_CATEG_SAL = formatString($in.0.INSTANCIA,null) + '|' + formatString($in.0.PK_FUNC_CATEG_SAL,null);
	$out.0.COD_CATEGSAL = formatString($in.0.COD_CATEGSAL,null);
	$out.0.DESC_CATEGORIA_SALARIAL = formatString($in.0.DESC_CATEGORIA_SALARIAL,null);

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugMode="true" fromNode="CATEGORIA_SALARIAL:0" guiBendpoints="" guiRouter="Manhattan" id="Edge50" inPort="Port 0 (in)" metadata="Metadata20" outPort="Port 0 (output)" toNode="TRATAMENT13:0"/>
<Edge debugMode="true" fromNode="TRATAMENT13:0" guiBendpoints="" guiRouter="Manhattan" id="Edge51" inPort="Port 0 (in)" metadata="Metadata20" outPort="Port 0 (out)" toNode="CATEGORIA_SALARIAL1:0"/>
</Phase>
</Graph>
